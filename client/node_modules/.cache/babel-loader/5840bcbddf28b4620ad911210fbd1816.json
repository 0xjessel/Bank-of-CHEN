{"ast":null,"code":"var _jsxFileName = \"/Users/jessechen/Documents/bank-of-jchen/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { JCHENTokensAbi } from './abi/abis';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst web3 = new Web3(Web3.givenProvider);\nconst BN = web3.utils.BN;\nconst JCHENTokensAddr = '0x1351a8dB5Dbb53b24ceA6E5B138E90B2006a5145';\nconst JCHENTokensContract = new web3.eth.Contract(JCHENTokensAbi, JCHENTokensAddr);\n\nfunction round(value) {\n  return Number(Math.round(value + 'e' + 2) + 'e-' + 2);\n}\n\nfunction App() {\n  _s();\n\n  const [accountAddress, setAccountAddress] = useState('0x0');\n  const [decimals, setDecimals] = useState(18);\n  const [mintNumber, setMintNumber] = useState(0);\n  const [burnNumber, setBurnNumber] = useState(0);\n  const [transferAddress, setTransferAddress] = useState('0x0');\n  const [transferAmount, setTransferAmount] = useState(0);\n  const [getTokenSupply, setTokenSupply] = useState(0);\n  const [getCurrentBalance, setCurrentBalance] = useState(0);\n  const [errorMsg, setErrorMsg] = useState();\n\n  const getAccount = async () => {\n    const ethereum = window.ethereum;\n\n    if (ethereum === undefined) {\n      console.error('window.ethereum is undefined!');\n      return;\n    }\n\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    setAccountAddress(accounts[0]);\n    return accounts[0];\n  };\n\n  const updatePage = async localAccount => {\n    try {\n      const account = localAccount !== null && localAccount !== void 0 ? localAccount : accountAddress;\n      const currentBalance = await JCHENTokensContract.methods.balanceOf(account).call();\n      setCurrentBalance(round(currentBalance / 10 ** decimals));\n      const totalSupply = await JCHENTokensContract.methods.totalSupply().call();\n      setTokenSupply(round(totalSupply / 10 ** decimals));\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n  };\n\n  const handleConnect = async e => {\n    try {\n      const account = await getAccount();\n      setDecimals(await JCHENTokensContract.methods.decimals().call()); // pass in account address as it's available in state yet\n\n      await updatePage(account);\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n  };\n\n  const handleBurn = async e => {\n    e.preventDefault();\n\n    try {\n      const convertedBurnNumber = new BN(burnNumber).mul(new BN((10 ** decimals).toString()));\n      const gas = await JCHENTokensContract.methods.burn(convertedBurnNumber).estimateGas();\n      await JCHENTokensContract.methods.burn(convertedBurnNumber).send({\n        from: accountAddress,\n        gas\n      });\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n\n    await updatePage();\n  };\n\n  const handleMint = async e => {\n    e.preventDefault();\n\n    try {\n      const convertedMintNumber = new BN(mintNumber).mul(new BN((10 ** decimals).toString()));\n      const gas = await JCHENTokensContract.methods.mint(accountAddress, convertedMintNumber.toString()).estimateGas();\n      await JCHENTokensContract.methods.mint(accountAddress, convertedMintNumber.toString()).send({\n        from: accountAddress,\n        gas\n      });\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n\n    await updatePage();\n  };\n\n  const handleTransfer = async e => {\n    e.preventDefault();\n\n    try {\n      const convertedTransferAmount = new BN(transferAmount).mul(new BN((10 ** decimals).toString()));\n      const gas = await JCHENTokensContract.methods.transfer(transferAddress, convertedTransferAmount.toString()).estimateGas();\n      await JCHENTokensContract.methods.transfer(transferAddress, convertedTransferAmount.toString()).send({\n        from: accountAddress,\n        gas\n      });\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n\n    await updatePage();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bank of $JCHEN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConnect,\n        type: \"Button\",\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), \"My address: \", accountAddress, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleMint,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Mint New Tokens:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            value: mintNumber,\n            onChange: e => setMintNumber(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleBurn,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Burn Tokens:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            value: burnNumber,\n            onChange: e => setBurnNumber(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Burn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleTransfer,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"address_label\",\n          children: [\"Transfer Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            value: transferAddress,\n            onChange: e => setTransferAddress(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            value: transferAmount,\n            onChange: e => setTransferAmount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Transfer Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error_msg\",\n        children: errorMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), \"My Balance: \", getCurrentBalance, \" $JCHEN\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), \"Total Token Supply: \", getTokenSupply, \" $JCHEN\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RisXWTHjpRH/Vko1HJ8xxFZxFcA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jessechen/Documents/bank-of-jchen/client/src/App.js"],"names":["React","useState","Web3","JCHENTokensAbi","web3","givenProvider","BN","utils","JCHENTokensAddr","JCHENTokensContract","eth","Contract","round","value","Number","Math","App","accountAddress","setAccountAddress","decimals","setDecimals","mintNumber","setMintNumber","burnNumber","setBurnNumber","transferAddress","setTransferAddress","transferAmount","setTransferAmount","getTokenSupply","setTokenSupply","getCurrentBalance","setCurrentBalance","errorMsg","setErrorMsg","getAccount","ethereum","window","undefined","console","error","accounts","request","method","updatePage","localAccount","account","currentBalance","methods","balanceOf","call","totalSupply","e","message","handleConnect","handleBurn","preventDefault","convertedBurnNumber","mul","toString","gas","burn","estimateGas","send","from","handleMint","convertedMintNumber","mint","handleTransfer","convertedTransferAmount","transfer","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { JCHENTokensAbi } from './abi/abis';\nimport './App.css';\n\nconst web3 = new Web3(Web3.givenProvider);\nconst BN = web3.utils.BN;\n\nconst JCHENTokensAddr = '0x1351a8dB5Dbb53b24ceA6E5B138E90B2006a5145';\nconst JCHENTokensContract = new web3.eth.Contract(JCHENTokensAbi, JCHENTokensAddr);\n\nfunction round(value) {\n  return Number(Math.round(value+'e'+2)+'e-'+2);\n}\n\nfunction App() {\n  const [accountAddress, setAccountAddress] = useState('0x0');\n  const [decimals, setDecimals] = useState(18);\n\n  const [mintNumber, setMintNumber] = useState(0);\n  const [burnNumber, setBurnNumber] = useState(0);\n  const [transferAddress, setTransferAddress] = useState('0x0');\n  const [transferAmount, setTransferAmount] = useState(0);\n  const [getTokenSupply, setTokenSupply] = useState(0);\n  const [getCurrentBalance, setCurrentBalance] = useState(0);\n\n  const [errorMsg, setErrorMsg] = useState();\n\n  const getAccount = async () => {\n    const ethereum = window.ethereum;\n    if (ethereum === undefined) {\n      console.error('window.ethereum is undefined!');\n      return;\n    }\n\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    setAccountAddress(accounts[0]);\n\n    return accounts[0];\n  }\n\n  const updatePage = async (localAccount) => {\n    try {\n      const account = localAccount ?? accountAddress;\n      const currentBalance = await JCHENTokensContract.methods.balanceOf(account).call();\n      setCurrentBalance(round(currentBalance / (10 ** decimals)));\n\n      const totalSupply = await JCHENTokensContract.methods.totalSupply().call();\n      setTokenSupply(round(totalSupply / (10 ** decimals)));\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n  }\n\n  const handleConnect = async (e) => {\n    try {\n      const account = await getAccount();\n      setDecimals(await JCHENTokensContract.methods.decimals().call());\n      // pass in account address as it's available in state yet\n      await updatePage(account);\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n  }\n\n  const handleBurn = async (e) => {\n    e.preventDefault();\n    try {\n      const convertedBurnNumber = new BN(burnNumber).mul(new BN((10 ** decimals).toString()));\n      const gas = await JCHENTokensContract.methods.burn(convertedBurnNumber).estimateGas();\n      await JCHENTokensContract.methods.burn(convertedBurnNumber).send({\n        from: accountAddress,\n        gas\n      });\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n\n    await updatePage();\n  }\n\n  const handleMint = async (e) => {\n    e.preventDefault();\n    try {\n      const convertedMintNumber = new BN(mintNumber).mul(new BN((10 ** decimals).toString()));\n      const gas = await JCHENTokensContract.methods.mint(accountAddress, convertedMintNumber.toString()).estimateGas();\n      await JCHENTokensContract.methods.mint(accountAddress, convertedMintNumber.toString()).send({\n        from: accountAddress,\n        gas\n      });\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n\n    await updatePage();\n  }\n\n  const handleTransfer = async (e) => {\n    e.preventDefault();\n    try {\n      const convertedTransferAmount = new BN(transferAmount).mul(new BN((10 ** decimals).toString()));\n      const gas = await JCHENTokensContract.methods.transfer(transferAddress, convertedTransferAmount.toString()).estimateGas();\n      await JCHENTokensContract.methods.transfer(transferAddress, convertedTransferAmount.toString()).send({\n        from: accountAddress,\n        gas,\n      });\n    } catch (e) {\n      setErrorMsg(e.message);\n    }\n\n    await updatePage();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Bank of $JCHEN</h1>\n        <button\n          onClick={handleConnect}\n          type=\"Button\">\n          Connect Wallet\n        </button>\n        <br />\n        My address: { accountAddress }\n        <br />\n        <br />\n        <br />\n        <form onSubmit={handleMint}>\n          <label>\n            Mint New Tokens:\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={mintNumber}\n              onChange={ e => setMintNumber(e.target.value) }\n            />\n          </label>\n          <input type=\"submit\" value=\"Mint\" />\n        </form>\n        <form onSubmit={handleBurn}>\n          <label>\n            Burn Tokens:\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={burnNumber}\n              onChange={ e => setBurnNumber(e.target.value) }\n            />\n          </label>\n          <input type=\"submit\" value=\"Burn\" />\n        </form>\n        <br />\n        <form onSubmit={handleTransfer}>\n          <label className=\"address_label\">\n            Transfer Address:\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={transferAddress}\n              onChange={ e => setTransferAddress(e.target.value) }\n            />\n          </label>\n          <label>\n            Amount:\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={transferAmount}\n              onChange={ e => setTransferAmount(e.target.value) }\n            />\n          </label>\n          <input type=\"submit\" value=\"Transfer Now\" />\n        </form>\n        <br />\n        <span className=\"error_msg\">{errorMsg}</span>\n        <br />\n        <br />\n        My Balance: { getCurrentBalance } $JCHEN\n        <br />\n        <br />\n        Total Token Supply: { getTokenSupply } $JCHEN\n      </header>\n    </div>\n  );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}